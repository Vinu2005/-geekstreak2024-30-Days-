Row with max 1s
Difficulty: MediumAccuracy: 33.09%Submissions: 276K+Points: 4
Given a boolean 2D array, consisting of only 1's and 0's, where each row is sorted. Return the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1.

Examples:

Input: arr[][] = [[0, 1, 1, 1],
               [0, 0, 1, 1],
               [1, 1, 1, 1],
               [0, 0, 0, 0]]
Output: 2
Explanation: Row 2 contains 4 1's (0-based indexing).
Input: arr[][] = [[0, 0], 
               [1, 1]]
Output: 1
Explanation: Row 1 contains 2 1's (0-based indexing).
Expected Time Complexity: O(n+m)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ number of rows, number of columns ≤ 103
0 ≤ arr[i][j] ≤ 1 
class Solution:

	def rowWithMax1s(self,arr):
	    max1=0
        store=-1
        for j in range(len(arr)):
            count=0
            for i in range(len(arr[j])):
                if arr[j][i]==1:
                    count+=1
                elif arr[j][i]==0:
                    count+=0
                else:
                    store=-1
                    
                    
            if max1<count:
                max1=count
                store= j
        return store
