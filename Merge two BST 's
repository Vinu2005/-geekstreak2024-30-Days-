Merge two BST 's
Difficulty: MediumAccuracy: 64.95%Submissions: 75K+Points: 4
Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O(m+n)
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Constraints:
1 ≤ Number of Nodes ≤ 105

class Solution:
    def merge(self, root1, root2):
        result = []  # List to store the merged result
        stack1, stack2 = [], []  # Stacks for in-order traversal of both trees

        # Continue until all nodes are processed
        while stack1 or stack2 or root1 or root2:
            # Push all left descendants of root1 to stack1
            while root1:
                stack1.append(root1)
                root1 = root1.left
            # Push all left descendants of root2 to stack2
            while root2:
                stack2.append(root2)
                root2 = root2.left

            # Determine which node to process next
            if not stack2 or (stack1 and stack1[-1].data <= stack2[-1].data):
                root1 = stack1.pop()  # Process node from stack1
                result.append(root1.data)  # Add to result list
                root1 = root1.right  # Move to right subtree
            else:
                root2 = stack2.pop()  # Process node from stack2
                result.append(root2.data)  # Add to result list
                root2 = root2.right  # Move to right subtree

        return result


