Form a palindrome
Difficulty: MediumAccuracy: 45.4%Submissions: 92K+Points: 4
Given a string, find the minimum number of characters to be inserted to convert it to a palindrome.

Examples :

Input: str = "abcd"
Output: 3
Explanation: Inserted character marked with bold characters in dcbabcd, here we need minimum three characters to make it palindrome.
Input: str = "aa"
Output: 0
Explanation: "aa" is already a palindrome.
Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n2)

Constraints:
1 ≤ |str| ≤ 500
str contains only lowercase alphabets.
class Solution:
    def solve(self, i, j, s):
        # Base case: If the indices cross, no insertions are needed
        if i >= j:
            return 0
        
        # Memoization check
        if self.dp[i][j] != -1:
            return self.dp[i][j]
        
        # If characters at i and j are the same, no new insertions needed
        if s[i] == s[j]:
            self.dp[i][j] = self.solve(i + 1, j - 1, s)
        else:
            # If characters are different, find the minimum insertions needed
            self.dp[i][j] = min(1 + self.solve(i + 1, j, s), 1 + self.solve(i, j - 1, s))
        
        return self.dp[i][j]
    def countMin(self, str):
        n = len(str)
        # Initialize dp array with -1
        self.dp = [[-1] * n for _ in range(n)]
        # Call the solve function with the full string
        return self.solve(0, n - 1, str)
