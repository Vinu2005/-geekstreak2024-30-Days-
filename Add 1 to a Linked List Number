Add 1 to a Linked List Number
Difficulty: MediumAccuracy: 31.91%Submissions: 234K+Points: 4
You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 10^5
0 <= list[i] <= 9

'''

class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None
'''

class Solution:
    def reverse(self, head):
        prev = None
        current = head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        return prev
    def addOne(self,head):
        # Step 1: Reverse the linked list
        head = self.reverse(head)
        
        # Step 2: Add 1 to the reversed list
        carry = 1
        current = head
        
        while current:
            current.data += carry
            if current.data > 9:
                current.data = 0
                carry = 1
            else:
                carry = 0
            
            # Move to the next node
            if carry and current.next is None:
                current.next = Node(1)
                carry = 0
            
            current = current.next
        
        # Step 3: Reverse the list again to restore original order
        head = self.reverse(head)
        
        return head
