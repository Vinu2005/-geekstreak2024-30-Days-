Shortest path in Undirected Graph
Difficulty: MediumAccuracy: 49.98%Submissions: 82K+Points: 4
You are given an Undirected Graph having unit weight of the edges, find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Examples :

Input:
n = 9, m = 10
edges=[[0,1],[0,3],[3,4],[4,5],[5,6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4

Input:
n = 4, m = 2
edges=[[1,3],[3,0]] 
src=3
Output:
1 1 -1 0

Constraint:
1<=n,m<=10^4
0<=edges[i][j]<=n-1


from collections import deque, defaultdict

class Solution:
    def shortestPath(self, edges, n, m, src):
        # Step 1: Create the adjacency list for the graph
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        # Step 2: Initialize the distance array
        distance = [float('inf')] * n
        distance[src] = 0
        
        # Step 3: BFS from the source node
        queue = deque([src])
        
        while queue:
            node = queue.popleft()
            
            # Explore all adjacent nodes
            for neighbor in graph[node]:
                if distance[neighbor] == float('inf'):
                    distance[neighbor] = distance[node] + 1
                    queue.append(neighbor)
        
        # Step 4: Replace 'inf' with -1 for unreachable nodes
        return [d if d != float('inf') else -1 for d in distance]
