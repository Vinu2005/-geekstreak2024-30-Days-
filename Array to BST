Array to BST
Difficulty: EasyAccuracy: 46.02%Submissions: 61K+Points: 2
Given a sorted array. Convert it into a Height Balanced Binary Search Tree (BST). Return the root of the BST.

Height-balanced BST means a binary tree in which the depth of the left subtree and the right subtree of every node never differ by more than 1.

Note: The driver code will check the BST, if it is a Height-balanced BST, the output will be true otherwise the output will be false.

Examples :

Input: nums = [1, 2, 3, 4]
Output: true
Explanation: The preorder traversal of the following BST formed is [2, 1, 3, 4]:
           2
         /   \
        1     3
               \
                4
Input: nums = [1, 2, 3, 4, 5, 6, 7]
Ouput: true
Explanation: The preorder traversal of the following BST formed is [4, 2, 1, 3, 6, 5, 7]:
        4
       / \
      2   6
     / \   / \
    1 3  5 7
Expected Time Complexity: O(n)
Expected Auxillary Space: O(n)

Constraints:
1 ≤ nums.size() ≤ 105
1 ≤ nums[i] ≤ 105

class Solution:
    def sortedArrayToBST(self, nums):
        # Base case: If the array is empty, return None
        if not nums:
            return None
        
        # Call the helper function to build the BST
        return self.buildBST(nums, 0, len(nums) - 1)
    
    def buildBST(self, nums, left, right):
        # Base case: If the left index exceeds the right index, return None
        if left > right:
            return None
        
        # Find the middle element of the current segment and make it the root
        mid = (left + right) // 2
        node = Node(nums[mid])
        
        # Recursively build the left subtree
        node.left = self.buildBST(nums, left, mid - 1)
        
        # Recursively build the right subtree
        node.right = self.buildBST(nums, mid + 1, right)
        
        # Return the root node
        return node
