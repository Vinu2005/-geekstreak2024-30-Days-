Split an array into two equal Sum subarrays
Difficulty: EasyAccuracy: 68.8%Submissions: 7K+Points: 2
Given an array of integers arr, return true if it is possible to split it in two subarrays (without reordering the elements), such that the sum of the two subarrays are equal. If it is not possible then return false.

Examples:

Input: arr = [1, 2, 3, 4, 5, 5]
Output: true
Explanation: In the above example, we can divide the array into two subarrays with eqaul sum. The two subarrays are: [1, 2, 3, 4] and [5, 5]. The sum of both the subarrays are 10. Hence, the answer is true.
Input: arr = [4, 3, 2, 1]
Output: false
Explanation: In the above example, we cannot divide the array into two subarrays with eqaul sum. Hence, the answer is false.
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Constraints:
1<=arr.size()<=10^5 
1<=arr[i]<=10^6

class Solution:
    def canSplit(self, arr):
        total_sum = sum(arr)
        
        # If the total sum is odd, it cannot be split into two equal parts
        if total_sum % 2 != 0:
            return False
        
        half_sum = total_sum // 2
        running_sum = 0
        
        # Traverse the array to find if we can reach half of the total sum
        for num in arr:
            running_sum += num
            if running_sum == half_sum:
                return True
        
        return False
