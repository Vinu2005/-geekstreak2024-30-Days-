Burning Tree
Difficulty: HardAccuracy: 53.53%Submissions: 68K+Points: 8
Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.


Examples : 

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5

Expected Time Complexity: O(number of nodes)
Expected Auxiliary Space: O(height of tree)


Constraints:
1 ≤ number of nodes ≤ 10^5

1 ≤ values of nodes ≤ 10^5

from collections import deque, defaultdict

class Solution:
    def minTime(self, root,target):
        # Step 1: Create a map to store parent pointers
        parent_map = {}
        target_node = None
        
        def dfs(node, parent):
            nonlocal target_node
            if not node:
                return
            if node.data == target:
                target_node = node
            parent_map[node] = parent
            dfs(node.left, node)
            dfs(node.right, node)
        
        # Perform DFS to populate parent_map and find the target node
        dfs(root, None)
        
        # Step 2: Perform BFS starting from the target node
        q = deque([target_node])
        visited = set([target_node])
        time = 0
        
        while q:
            # Number of nodes to burn at the current level
            size = len(q)
            for _ in range(size):
                current_node = q.popleft()
                
                # Check the left child
                if current_node.left and current_node.left not in visited:
                    visited.add(current_node.left)
                    q.append(current_node.left)
                
                # Check the right child
                if current_node.right and current_node.right not in visited:
                    visited.add(current_node.right)
                    q.append(current_node.right)
                
                # Check the parent
                parent = parent_map[current_node]
                if parent and parent not in visited:
                    visited.add(parent)
                    q.append(parent)
            
            # If there are nodes to process in the next level, increment time
            if q:
                time += 1
        
        return time
