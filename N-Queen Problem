N-Queen Problem
Difficulty: HardAccuracy: 35.43%Submissions: 84K+Points: 8
The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].



Examples:

Input: 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.
Input: 4
Output: [[2 4 1 3 ],[3 1 4 2 ]]
Explaination: These are the 2 possible solutions.
Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 

Constraints:
1 ≤ n ≤ 10




class Solution:
    def solve(self, col, board, n, sol):
        if col == n:
            sol.append(board[:])
        for row in range(1, n + 1):
            if all(board[i] != row and abs(board[i] - row) != col - i for i in range(col)):
                board[col] = row
                self.solve(col + 1, board, n, sol)
    def nQueen(self, n):
         sol = []
         self.solve(0, [0] * n, n, sol)
         return sol
