Sum of Middle elements of two sorted arrays
Difficulty: MediumAccuracy: 47.98%Submissions: 72K+Points: 4
Given 2 sorted integer arrays arr1 and arr2 of the same size. Find the sum of the middle elements of two sorted arrays arr1 and arr2.

Examples:

Input: arr1 = [1, 2, 4, 6, 10], arr2 = [4, 5, 6, 9, 12]
Output: 11
Explanation: The merged array looks like [1, 2, 4, 4, 5, 6, 6, 9, 10, 12]. Sum of middle elements is 11 (5 + 6).
Input: arr1 = [1, 12, 15, 26, 38], arr2 = [2, 13, 17, 30, 45]
Output: 32
Explanation: The merged array looks like [1, 2, 12, 13, 15, 17, 26, 30, 38, 45]. Sum of middle elements is 32 (15 + 17).
Expected Time Complexity: O(log n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= arr1.size() == arr2.size() <= 103
1 <= arr1[i] <= 106
1 <= arr2[i] <= 106

class Solution:
    def sum_of_middle_elements(self, arr1, arr2):
        n = len(arr1)
        if n == 0:
            return 0
        
        # Ensure arr1 is the smaller array
        if arr1[n-1] > arr2[n-1]:
            arr1, arr2 = arr2, arr1
        
        low, high = 0, n
        
        while low <= high:
            mid1 = (low + high) // 2
            mid2 = n - mid1
            
            l1 = arr1[mid1 - 1] if mid1 > 0 else float('-inf')
            l2 = arr2[mid2 - 1] if mid2 > 0 else float('-inf')
            r1 = arr1[mid1] if mid1 < n else float('inf')
            r2 = arr2[mid2] if mid2 < n else float('inf')
            
            if l1 <= r2 and l2 <= r1:
                return max(l1, l2) + min(r1, r2)
            elif l1 > r2:
                high = mid1 - 1
            else:
                low = mid1 + 1
        
        return -1
