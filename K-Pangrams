K-Pangrams
Difficulty: EasyAccuracy: 20.91%Submissions: 40K+Points: 2
Given a string str and an integer k, return true if the string can be changed into a pangram after at most k operations, else return false.

A single operation consists of swapping an existing alphabetic character with any other lowercase alphabetic character.

Note - A pangram is a sentence containing every letter in the english alphabet.

Examples :

Input: str = "the quick brown fox jumps over the lazy dog", k = 0
Output: true
Explanation: the sentence contains all 26 characters and is already a pangram.
Input: str = "aaaaaaaaaaaaaaaaaaaaaaaaaa", k = 25 
Output: true
Explanation: The word contains 26 instances of 'a'. Since only 25 operations are allowed. We can keep 1 instance and change all others to make str a pangram.
Input: str = "a b c d e f g h i j k l m", k = 20
Output: false
Explanation: Since there are only 13 alphabetic characters in this case, no amount of swapping can produce a panagram here.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)  

Constraints:
1<= str.size() <= 105
0<= k <= 50
str may contain duplicate characters
str contains only lowercase alphabets or spaces.

class Solution:
    def kPangram(self,string, k):
        # Split the string into words
        string = string.split(" ")
        
        # Calculate the total number of characters in the string (excluding spaces)
        res = 0
        for i in string:
            res += len(i)
        
        # If the total number of characters is less than 26, it's impossible to form a pangram
        if res < 26:
            return False
        
        # Dictionary to count the frequency of each character
        d = {}
        for i in string:
            for j in i:
                d[j] = d.get(j, 0) + 1
        
        # If the number of distinct characters is 26, it's already a pangram
        if len(d) == 26:
            return True
        
        # If the number of changes needed to make it a pangram is less than or equal to k
        elif 26 - len(d) <= k:
            return True
        
        # Otherwise, it's not possible to make it a k-pangram
        return False
