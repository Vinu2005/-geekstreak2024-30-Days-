Bottom View of Binary Tree
Difficulty: MediumAccuracy: 54.18%Submissions: 246K+Points: 4
Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 105

class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
class Solution:
    def bottomView(self, root):
        if not root:
            return []
        
        # Dictionary to store the last node at each horizontal distance
        hd_node_map = {}
        
        # Queue for BFS, storing pairs of node and its horizontal distance
        queue = deque([(root, 0)])
        
        while queue:
            node, hd = queue.popleft()
            
            # Update the dictionary with the current node for this horizontal distance
            hd_node_map[hd] = node.data
            
            # Add left child to queue if exists
            if node.left:
                queue.append((node.left, hd - 1))
            
            # Add right child to queue if exists
            if node.right:
                queue.append((node.right, hd + 1))
        
        # Sort the dictionary by horizontal distance and extract the values
        bottom_view = [hd_node_map[hd] for hd in sorted(hd_node_map)]
        
        return bottom_view
