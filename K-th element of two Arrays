K-th element of two Arrays
Difficulty: MediumAccuracy: 37.4%Submissions: 249K+Points: 4
Given two sorted arrays arr1 and arr2 and an element k. The task is to find the element that would be at the kth position of the combined sorted array.

Examples :

Input: k = 5, arr1[] = [2, 3, 6, 7, 9], arr2[] = [1, 4, 8, 10]
Output: 6
Explanation: The final combined sorted array would be - 1, 2, 3, 4, 6, 7, 8, 9, 10. The 5th element of this array is 6.
Input: k = 7, arr1[] = [100, 112, 256, 349, 770], arr2[] = [72, 86, 113, 119, 265, 445, 892]
Output: 256
Explanation: Combined sorted array is - 72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892. 7th element of this array is 256.
Expected Time Complexity: O(log(n) + log(m))
Expected Auxiliary Space: O(log (n))

Constraints:
1 <= k<= arr1.size()+arr2.size()
1 <= arr1.size(), arr2.size() <= 106
0 <= arr1[i], arr2[i] < 108

class Solution:  # Define the Solution class
    def kthElement(self, k, arr1, arr2):  # Define the kthElement method with parameters k, arr1, and arr2
        n = len(arr1)  # Get the length of arr1
        m = len(arr2)  # Get the length of arr2

        if n > m:  # Ensure arr1 is the smaller array
            return self.kthElement(k, arr2, arr1)  # Swap the arrays and call the function again if needed

        low = max(0, k - m)  # Set the lower bound for binary search
        high = min(k, n)  # Set the upper bound for binary search

        while low <= high:  # Perform binary search
            cut1 = (low + high) // 2  # Calculate the midpoint for arr1
            cut2 = k - cut1  # Calculate the corresponding point for arr2

            l1 = arr1[cut1 - 1] if cut1 > 0 else float('-inf')  # Get the left partition's max value from arr1
            l2 = arr2[cut2 - 1] if cut2 > 0 else float('-inf')  # Get the left partition's max value from arr2
            r1 = arr1[cut1] if cut1 < n else float('inf')  # Get the right partition's min value from arr1
            r2 = arr2[cut2] if cut2 < m else float('inf')  # Get the right partition's min value from arr2

            if l1 <= r2 and l2 <= r1:  # Check if the partitions are valid
                return max(l1, l2)  # Return the k-th element
            elif l1 > r2:  # If l1 is greater than r2, adjust the upper bound
                high = cut1 - 1  # Move the upper bound to the left
            else:  # If l2 is greater than r1, adjust the lower bound
                low = cut1 + 1  # Move the lower bound to the right

        return -1  # Return -1 if no valid partition is found
