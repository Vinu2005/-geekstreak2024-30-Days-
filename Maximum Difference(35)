Maximum Difference
Difficulty: MediumAccuracy: 33.3%Submissions: 61K+Points: 4
Given an integer array arr of integers, the task is to find the maximum absolute difference between the nearest left smaller element and the nearest right smaller element of every element in array arr. If for any component of the arr, the nearest smaller element doesn't exist then consider it as 0.

Examples :

Input: arr = [2, 1, 8]
Output: 1
Explanation: left smaller array ls = [0, 0, 1], right smaller array rs = [1, 0, 0]. Maximum Diff of abs(ls[i] - rs[i]) = 1
Input: arr = [2, 4, 8, 7, 7, 9, 3]
Output: 4
Explanation: left smaller array ls = [0, 2, 4, 4, 4, 7, 2], right smaller rs = [0, 3, 7, 3, 3, 3, 0]. Maximum Diff of abs(ls[i] - rs[i]) = abs(7 - 3) = 4
Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraints:
1 <= arr.size() <= 10^6
1<= arr[i] <=10^9

class Solution:
    def findMaxDiff(self, arr):
        n = len(arr)
        
        # Initialize left smaller and right smaller arrays
        ls = [0] * n
        rs = [0] * n
        
        # Stack to store indices of array elements
        stack = []
        
        # Fill left smaller array
        for i in range(n):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            ls[i] = arr[stack[-1]] if stack else 0
            stack.append(i)
        
        # Clear the stack to reuse it for right smaller
        stack = []
        
        # Fill right smaller array
        for i in range(n-1, -1, -1):
            while stack and arr[stack[-1]] >= arr[i]:
                stack.pop()
            rs[i] = arr[stack[-1]] if stack else 0
            stack.append(i)
        
        # Calculate the maximum difference
        max_diff = 0
        for i in range(n):
            max_diff = max(max_diff, abs(ls[i] - rs[i]))
        
        return max_diff
