Sum Tree
Difficulty: MediumAccuracy: 37.17%Submissions: 241K+Points: 4
Given a Binary Tree. Check for the Sum Tree for every node except the leaf node. Return true if it is a Sum Tree otherwise, return false.

A SumTree is a Binary Tree where the value of a node is equal to the sum of the nodes present in its left subtree and right subtree. An empty tree is also a Sum Tree as the sum of an empty tree can be considered to be 0. A leaf node is also considered a Sum Tree.

Examples :

Input:
    3
  /   \    
 1     2
Output: true
Explanation: The sum of left subtree and right subtree is 1 + 2 = 3, which is the value of the root node. Therefore,the given binary tree is a sum tree.
Input:
          10
        /    \
      20      30
    /   \ 
   10    10
Output: false
Explanation: The given tree is not a sum tree. For the root node, sum of elements in left subtree is 40 and sum of elements in right subtree is 30. Root element = 10 which is not equal to 30+40.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(Height of the Tree)

Constraints:
2 ≤ number of nodes ≤ 105
1 ≤ node value ≤ 105

'''
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
'''

class Solution:
    def is_sum_tree_util(self, node):
        # Base cases
        if node is None:
            return 0, True
        if node.left is None and node.right is None:
            return node.data, True
        
        # Recursive step: calculate the sum of left and right subtrees
        left_sum, is_left_sum_tree = self.is_sum_tree_util(node.left)
        right_sum, is_right_sum_tree = self.is_sum_tree_util(node.right)
        
        # Total sum including the current node
        total_sum = left_sum + right_sum
        
        # Check if the current node satisfies the sum tree property
        if is_left_sum_tree and is_right_sum_tree and node.data == total_sum:
            return node.data + total_sum, True
        else:
            return total_sum, False
    def is_sum_tree(self, node):
        _, is_sum_tree = self.is_sum_tree_util(node)
        return is_sum_tree
